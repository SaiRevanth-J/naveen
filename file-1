node {
    properties([
        parameters([
            [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'Select POD', filterLength: 1, filterable: true, name: 'POD', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: true, script: 'return "error"'], script: [classpath: [], sandbox: true, script: '''def choices=[];\ntextFile=new File("/data/gitws/${repo}/jenkins/constants/parameters");\ntextFile.eachLine{ line ->\nif(line.startsWith(\'POD\')) {\nline.split(\'=\')[1].split(\',\').each {\nchoices.add(it)\n}}}\nreturn choices''']]],
            [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'Select Release', filterLength: 1, filterable: false, name: 'RELEASE', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: true, script: 'return \'error\''], script: [classpath: [], sandbox: true, script: '''def choices=[];\ntextFile=new File("/data/gitws/${repo}/jenkins/constants/parameters");\ntextFile.eachLine{ line ->\nif(line.startsWith(\'RELEASE\')) {\nline.split(\'=\')[1].split(\',\').each {\nchoices.add(it)\n}}}\nreturn choices''']]],
            [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'Select Application Environment', filterLength: 1, filterable: false, name: 'APPLICATIONENV', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: true, script: 'return \'error\''], script: [classpath: [], sandbox: true, script: '''def choices=[];\ntextFile=new File("/data/gitws/${repo}/jenkins/constants/parameters");\ntextFile.eachLine{ line ->\nif(line.startsWith(\'APPLICATIONENV\')) {\nline.split(\'=\')[1].split(\',\').each {\nchoices.add(it)\n}}}\nreturn choices''']]],
            [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'Select Businessunit', filterLength: 1, filterable: false, name: 'BUSINESSUNIT', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: true, script: 'return "error"'], script: [classpath: [], sandbox: true, script: '''def choices=[];\ntextFile=new File("/data/gitws/${repo}/jenkins/constants/parameters");\ntextFile.eachLine{ line ->\nif(line.startsWith(\'BUSINESSUNIT\')) {\nline.split(\'=\')[1].split(\',\').each {\nchoices.add(it)\n}}}\nreturn choices''']]],
            [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'Select Chef-Repo', filterLength: 1, filterable: false, name: 'CHEF_REPO', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: true, script: 'return "error"'], script: [classpath: [], sandbox: true, script: '''def choices=[];\ntextFile=new File("/data/gitws/${repo}/jenkins/constants/parameters");\ntextFile.eachLine{ line ->\nif(line.startsWith(\'CHEF_REPO\')) {\nline.split(\'=\')[1].split(\',\').each {\nchoices.add(it)\n}}}\nreturn choices''']]],
            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: 'ad-hoc chef repo path', name: 'CHEF_REPO_ADHOC', omitValueField: true, randomName: 'choice-parameter-10971208399996859', referencedParameters: 'CHEF_REPO', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: true, script: 'return \'error\''], script: [classpath: [], sandbox: true, script: 'if (CHEF_REPO != \'NOT LISTED\') { return \'<hr>\' } else { return \'<input type="text" id="value" name="value">\' }']]], 
            string(defaultValue: '', description: '''input name of chef env that you want to attach to nodes. DO NOT include .json, just provide env name. IT IS ASSUMED THAT ENV NAME IS SAME AS ENV FILE NAME.''', name: 'CHEF_ENV_NAME', trim: true)
        ])
    ])
